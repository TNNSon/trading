{"version":3,"sources":["../src/app/core/MongooseConnection.ts"],"names":[],"mappings":";;AAAA,mCAAsC;AAEtC,IAAM,eAAe,GAAG,EAAE,CAAC;AAC3B,IAAM,kBAAkB,GAAG,IAAI,CAAC;AAEhC,oBAAoB;AACpB;IAmDI;IACA,CAAC;IAhDD,sBAAW,6BAAO;aAAlB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzB,CAAC;YAED,IAAI,UAAU,GAAG,eAAe,CAAC;YAEjC;gBACI,IAAI,gBAAgB,GAAG,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,iBAAiB,CAAC;qBACrF,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC;gBAE3D,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAC,MAAM,EAAE,EAAC,SAAS,EAAE,KAAK,EAAC,EAAE,cAAc,EAAE,IAAI,EAAC,EAAC,UAAC,GAAQ;oBAClG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,IAAI,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;4BAC1I,UAAU,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;4BACjD,UAAU,EAAE,CAAC;wBACjB,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;YAAA,CAAC;YAEF,gBAAgB,EAAE,CAAC;YAEnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEzB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE;gBACrC,UAAU,GAAG,eAAe,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAQ;gBAC1C,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,GAAG,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE;gBACxC,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE;gBAClB,kBAAkB,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;oBACzC,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;oBACxE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IA/Cc,2BAAQ,GAAG,KAAK,CAAC;IAmDpC,yBAAC;CArDD,AAqDC,IAAA;AArDY,gDAAkB","file":"../../../public/app/core/MongooseConnection.js","sourcesContent":["import mongoose = require(\"mongoose\");\r\n\r\nconst MAX_RETRY_TIMES = 30;\r\nconst RECONNECT_INTERVAL = 1000;\r\n\r\n// singleton pattern\r\nexport class MongooseConnection {\r\n    private static instance: mongoose.Mongoose;\r\n    private static isSigint = false;\r\n\r\n    static get connect(): any {\r\n        if (this.instance) {\r\n            return this.instance;\r\n        }\r\n\r\n        let retryTimes = MAX_RETRY_TIMES;\r\n\r\n        function connectWithRetry() {\r\n            let connectionString = \"mongodb://\".concat(process.env.DB_CONNECTION || \"localhost:27017\")\r\n                .concat(\"/\").concat(process.env.DB_NAME || \"facebook\");\r\n\r\n            return mongoose.connect(connectionString, {config: {autoIndex: false}, useMongoClient: true},(err: any) => {\r\n                if (err) {\r\n                    if (!MongooseConnection.isSigint && err.message && err.message.match(/failed to connect to server .* on first connect/) && retryTimes !== 0) {\r\n                        setTimeout(connectWithRetry, RECONNECT_INTERVAL);\r\n                        retryTimes--;\r\n                    }\r\n                }\r\n            })\r\n        };\r\n\r\n        connectWithRetry();\r\n\r\n        this.instance = mongoose;\r\n\r\n        this.instance.connection.on('connected', () => {\r\n            retryTimes = MAX_RETRY_TIMES;\r\n        });\r\n\r\n        this.instance.connection.on('error', (err: any) => {\r\n            console.log(\"connection db err: \" + err);\r\n        });\r\n\r\n        this.instance.connection.on('disconnected', function () {\r\n            console.log('Database connection disconnected');\r\n        });\r\n\r\n        process.on('SIGTERM', function () {\r\n            MongooseConnection.instance.connection.close(function () {\r\n                console.log('Database connection disconnected through app termination');\r\n                process.exit(0);\r\n            });\r\n        });\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    private constructor() {\r\n    }\r\n}"]}